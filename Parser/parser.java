
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\005\000" +
    "\002\025\010\000\002\025\010\000\002\025\005\000\002" +
    "\002\003\000\002\002\003\000\002\027\010\000\002\027" +
    "\010\000\002\027\010\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\026\004\000\002\026\006\000\002\022\006\000\002" +
    "\007\004\000\002\007\002\000\002\010\004\000\002\010" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\004\000" +
    "\002\014\003\000\002\014\004\000\002\017\007\000\002" +
    "\017\011\000\002\017\007\000\002\017\011\000\002\020" +
    "\007\000\002\020\007\000\002\020\007\000\002\020\007" +
    "\000\002\021\005\000\002\021\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\006\000\002" +
    "\016\006\000\002\023\006\000\002\011\003\000\002\011" +
    "\002\000\002\012\005\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\012\003\014\006\004\010\006\037\007\001" +
    "\002\000\006\003\ufff5\035\ufff5\001\002\000\012\002\ufffd" +
    "\003\ufffd\006\ufffd\010\ufffd\001\002\000\006\003\ufff4\035" +
    "\ufff4\001\002\000\004\002\uffff\001\002\000\004\002\211" +
    "\001\002\000\012\002\001\003\207\006\004\010\006\001" +
    "\002\000\012\002\ufffa\003\ufffa\006\ufffa\010\ufffa\001\002" +
    "\000\006\003\041\035\201\001\002\000\014\002\ufffc\003" +
    "\ufffc\006\ufffc\010\ufffc\035\016\001\002\000\012\002\ufffb" +
    "\003\ufffb\006\ufffb\010\ufffb\001\002\000\004\027\017\001" +
    "\002\000\010\003\021\006\004\010\023\001\002\000\006" +
    "\026\177\030\ufff0\001\002\000\006\026\uffec\030\uffec\001" +
    "\002\000\004\030\031\001\002\000\006\030\uffef\035\ufff4" +
    "\001\002\000\004\035\026\001\002\000\006\026\uffed\030" +
    "\uffed\001\002\000\010\026\uffeb\030\uffeb\031\027\001\002" +
    "\000\004\032\030\001\002\000\006\026\uffea\030\uffea\001" +
    "\002\000\004\033\032\001\002\000\032\003\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\025\uffe7\027\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\001\002\000\012\002\ufff2" +
    "\003\ufff2\006\ufff2\010\ufff2\001\002\000\032\003\uffe5\005" +
    "\uffe5\006\004\007\uffe5\010\006\011\uffe5\025\uffe5\027\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000\026\003" +
    "\070\005\061\007\057\011\056\025\055\027\062\033\032" +
    "\034\054\035\063\036\064\001\002\000\032\003\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\025\uffe8\027\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\006\003" +
    "\041\035\040\001\002\000\006\025\043\031\044\001\002" +
    "\000\004\025\042\001\002\000\034\002\ufff6\003\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\025\ufff6\027\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\001\002\000\034\002" +
    "\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\025\ufff9\027\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\001" +
    "\002\000\006\003\046\036\045\001\002\000\004\032\051" +
    "\001\002\000\004\032\047\001\002\000\004\025\050\001" +
    "\002\000\034\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\025\ufff7\027\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\001\002\000\004\025\052\001\002\000\034" +
    "\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\025\ufff8\027\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\001\002\000\026\003\uffe6\005\uffe6\007\uffe6\011\uffe6\025" +
    "\uffe6\027\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002" +
    "\000\036\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\025\uffe9\027\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\001\002\000\030\003\uffde\004\uffde\005" +
    "\uffde\007\uffde\011\uffde\025\uffde\027\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\001\002\000\006\027\163\037\162\001" +
    "\002\000\012\025\157\027\062\035\063\036\064\001\002" +
    "\000\030\003\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3\025" +
    "\uffe3\027\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002" +
    "\000\004\027\144\001\002\000\010\027\062\035\063\036" +
    "\064\001\002\000\046\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\125\030\uffc3\031\126\032\uffc3" +
    "\037\uffc3\001\002\000\040\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\025\uffc4\026\uffc4\030\uffc4\032\uffc4\037\uffc4\001\002\000" +
    "\030\012\103\013\077\014\106\015\104\016\110\017\107" +
    "\020\105\021\100\022\102\023\101\025\124\001\002\000" +
    "\030\003\uffe0\004\uffe0\005\uffe0\007\uffe0\011\uffe0\025\uffe0" +
    "\027\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000" +
    "\030\003\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\025\uffe4" +
    "\027\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000" +
    "\004\025\123\001\002\000\030\003\uffe2\004\uffe2\005\uffe2" +
    "\007\uffe2\011\uffe2\025\uffe2\027\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\030\003\uffe1\004\uffe1\005\uffe1" +
    "\007\uffe1\011\uffe1\025\uffe1\027\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\001\002\000\040\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\025\uffc5\026\uffc5\030\uffc5\032\uffc5\037\uffc5\001\002" +
    "\000\042\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\075\025\uffc6" +
    "\026\uffc6\030\uffc6\032\uffc6\037\uffc6\001\002\000\010\027" +
    "\062\035\063\036\064\001\002\000\040\012\103\013\077" +
    "\014\106\015\104\016\110\017\107\020\105\021\100\022" +
    "\102\023\101\025\uffd2\026\uffd2\030\uffd2\032\uffd2\037\uffd2" +
    "\001\002\000\010\027\062\035\063\036\064\001\002\000" +
    "\010\027\062\035\063\036\064\001\002\000\010\027\062" +
    "\035\063\036\064\001\002\000\010\027\062\035\063\036" +
    "\064\001\002\000\010\027\062\035\063\036\064\001\002" +
    "\000\010\027\062\035\063\036\064\001\002\000\010\027" +
    "\062\035\063\036\064\001\002\000\010\027\062\035\063" +
    "\036\064\001\002\000\010\027\062\035\063\036\064\001" +
    "\002\000\010\027\062\035\063\036\064\001\002\000\024" +
    "\012\103\013\077\014\106\015\104\025\uffcc\026\uffcc\030" +
    "\uffcc\032\uffcc\037\uffcc\001\002\000\024\012\103\013\077" +
    "\014\106\015\104\025\uffc9\026\uffc9\030\uffc9\032\uffc9\037" +
    "\uffc9\001\002\000\040\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025" +
    "\uffcf\026\uffcf\030\uffcf\032\uffcf\037\uffcf\001\002\000\024" +
    "\012\103\013\077\014\106\015\104\025\uffcb\026\uffcb\030" +
    "\uffcb\032\uffcb\037\uffcb\001\002\000\040\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\025\uffce\026\uffce\030\uffce\032\uffce\037\uffce" +
    "\001\002\000\040\012\uffd1\013\uffd1\014\106\015\104\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\032\uffd1\037\uffd1\001\002\000\024\012" +
    "\103\013\077\014\106\015\104\025\uffcd\026\uffcd\030\uffcd" +
    "\032\uffcd\037\uffcd\001\002\000\024\012\103\013\077\014" +
    "\106\015\104\025\uffc8\026\uffc8\030\uffc8\032\uffc8\037\uffc8" +
    "\001\002\000\024\012\103\013\077\014\106\015\104\025" +
    "\uffca\026\uffca\030\uffca\032\uffca\037\uffca\001\002\000\040" +
    "\012\uffd0\013\uffd0\014\106\015\104\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\032\uffd0\037\uffd0\001\002\000\030\003\uffdd\004\uffdd\005" +
    "\uffdd\007\uffdd\011\uffdd\025\uffdd\027\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\001\002\000\030\003\uffdf\004\uffdf\005" +
    "\uffdf\007\uffdf\011\uffdf\025\uffdf\027\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\001\002\000\014\003\136\027\062\030" +
    "\uffbe\035\063\036\064\001\002\000\012\003\127\027\062" +
    "\035\063\036\064\001\002\000\004\032\132\001\002\000" +
    "\030\012\103\013\077\014\106\015\104\016\110\017\107" +
    "\020\105\021\100\022\102\023\101\032\131\001\002\000" +
    "\042\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\032\uffc2\037\uffc2\001\002\000\042\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1" +
    "\032\uffc1\037\uffc1\001\002\000\006\026\140\030\uffbf\001" +
    "\002\000\032\012\103\013\077\014\106\015\104\016\110" +
    "\017\107\020\105\021\100\022\102\023\101\026\uffbc\030" +
    "\uffbc\001\002\000\004\030\137\001\002\000\006\026\uffbb" +
    "\030\uffbb\001\002\000\040\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\025\uffc0\026\uffc0\030\uffc0\032\uffc0\037\uffc0\001\002\000" +
    "\010\027\062\035\063\036\064\001\002\000\032\012\103" +
    "\013\077\014\106\015\104\016\110\017\107\020\105\021" +
    "\100\022\102\023\101\026\uffbd\030\uffbd\001\002\000\030" +
    "\012\103\013\077\014\106\015\104\016\110\017\107\020" +
    "\105\021\100\022\102\023\101\030\143\001\002\000\040" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\030\uffc7" +
    "\032\uffc7\037\uffc7\001\002\000\012\003\145\027\062\035" +
    "\063\036\064\001\002\000\004\030\153\001\002\000\030" +
    "\012\103\013\077\014\106\015\104\016\110\017\107\020" +
    "\105\021\100\022\102\023\101\030\147\001\002\000\024" +
    "\003\070\005\061\007\057\011\056\025\055\027\062\033" +
    "\032\035\063\036\064\001\002\000\030\003\uffdc\004\151" +
    "\005\uffdc\007\uffdc\011\uffdc\025\uffdc\027\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\001\002\000\024\003\070\005\061" +
    "\007\057\011\056\025\055\027\062\033\032\035\063\036" +
    "\064\001\002\000\030\003\uffdb\004\uffdb\005\uffdb\007\uffdb" +
    "\011\uffdb\025\uffdb\027\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\001\002\000\024\003\070\005\061\007\057\011\056" +
    "\025\055\027\062\033\032\035\063\036\064\001\002\000" +
    "\030\003\uffda\004\155\005\uffda\007\uffda\011\uffda\025\uffda" +
    "\027\uffda\033\uffda\034\uffda\035\uffda\036\uffda\001\002\000" +
    "\024\003\070\005\061\007\057\011\056\025\055\027\062" +
    "\033\032\035\063\036\064\001\002\000\030\003\uffd9\004" +
    "\uffd9\005\uffd9\007\uffd9\011\uffd9\025\uffd9\027\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\001\002\000\030\003\uffd3\004" +
    "\uffd3\005\uffd3\007\uffd3\011\uffd3\025\uffd3\027\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\001\002\000\030\012\103\013" +
    "\077\014\106\015\104\016\110\017\107\020\105\021\100" +
    "\022\102\023\101\025\161\001\002\000\030\003\uffd4\004" +
    "\uffd4\005\uffd4\007\uffd4\011\uffd4\025\uffd4\027\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\001\002\000\010\027\062\035" +
    "\063\036\064\001\002\000\012\003\164\027\062\035\063" +
    "\036\064\001\002\000\004\030\172\001\002\000\032\012" +
    "\103\013\077\014\106\015\104\016\110\017\107\020\105" +
    "\021\100\022\102\023\101\030\167\037\166\001\002\000" +
    "\024\003\070\005\061\007\057\011\056\025\055\027\062" +
    "\033\032\035\063\036\064\001\002\000\024\003\070\005" +
    "\061\007\057\011\056\025\055\027\062\033\032\035\063" +
    "\036\064\001\002\000\030\003\uffd8\004\uffd8\005\uffd8\007" +
    "\uffd8\011\uffd8\025\uffd8\027\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\001\002\000\030\003\uffd5\004\uffd5\005\uffd5\007" +
    "\uffd5\011\uffd5\025\uffd5\027\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\024\003\070\005\061\007\057\011" +
    "\056\025\055\027\062\033\032\035\063\036\064\001\002" +
    "\000\030\003\uffd7\004\uffd7\005\uffd7\007\uffd7\011\uffd7\025" +
    "\uffd7\027\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002" +
    "\000\030\012\103\013\077\014\106\015\104\016\110\017" +
    "\107\020\105\021\100\022\102\023\101\030\175\001\002" +
    "\000\024\003\070\005\061\007\057\011\056\025\055\027" +
    "\062\033\032\035\063\036\064\001\002\000\030\003\uffd6" +
    "\004\uffd6\005\uffd6\007\uffd6\011\uffd6\025\uffd6\027\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\001\002\000\006\006\004" +
    "\010\006\001\002\000\006\026\uffee\030\uffee\001\002\000" +
    "\010\025\043\027\202\031\044\001\002\000\010\003\021" +
    "\006\004\010\023\001\002\000\004\030\204\001\002\000" +
    "\006\003\205\033\032\001\002\000\012\002\ufff1\003\ufff1" +
    "\006\ufff1\010\ufff1\001\002\000\012\002\ufff3\003\ufff3\006" +
    "\ufff3\010\ufff3\001\002\000\004\035\016\001\002\000\012" +
    "\002\ufffe\003\ufffe\006\ufffe\010\ufffe\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\016\002\012\003\007\004\010\024\004\025" +
    "\014\027\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\012\024\207\025\014\027\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\023\005\021\006\017" +
    "\026\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\032\001\001\000\004\007\033\001\001" +
    "\000\002\001\001\000\010\002\036\010\034\025\035\001" +
    "\001\000\024\013\052\014\066\015\064\016\073\017\070" +
    "\020\071\021\065\022\057\023\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\157\016\073\023\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\141\016\073\023\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\075\016\073\023\072\001\001" +
    "\000\002\001\001\000\010\015\121\016\073\023\072\001" +
    "\001\000\010\015\120\016\073\023\072\001\001\000\010" +
    "\015\117\016\073\023\072\001\001\000\010\015\116\016" +
    "\073\023\072\001\001\000\010\015\115\016\073\023\072" +
    "\001\001\000\010\015\114\016\073\023\072\001\001\000" +
    "\010\015\113\016\073\023\072\001\001\000\010\015\112" +
    "\016\073\023\072\001\001\000\010\015\111\016\073\023" +
    "\072\001\001\000\010\015\110\016\073\023\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\134" +
    "\012\132\015\133\016\073\023\072\001\001\000\010\015" +
    "\127\016\073\023\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\140\016\073\023\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\145\016\073\023\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\147\014\066\015\064" +
    "\016\073\017\070\020\071\021\065\022\057\023\072\001" +
    "\001\000\002\001\001\000\024\013\151\014\066\015\064" +
    "\016\073\017\070\020\071\021\065\022\057\023\072\001" +
    "\001\000\002\001\001\000\024\013\153\014\066\015\064" +
    "\016\073\017\070\020\071\021\065\022\057\023\072\001" +
    "\001\000\002\001\001\000\024\013\155\014\066\015\064" +
    "\016\073\017\070\020\071\021\065\022\057\023\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\173\016\073\023\072\001" +
    "\001\000\010\015\164\016\073\023\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\170\014\066\015" +
    "\064\016\073\017\070\020\071\021\065\022\057\023\072" +
    "\001\001\000\024\013\167\014\066\015\064\016\073\017" +
    "\070\020\071\021\065\022\057\023\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\172\014\066\015" +
    "\064\016\073\017\070\020\071\021\065\022\057\023\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\175\014\066\015\064\016\073\017\070\020\071\021\065" +
    "\022\057\023\072\001\001\000\002\001\001\000\006\002" +
    "\023\026\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\023\005\202\006\017\026\024\001\001\000" +
    "\002\001\001\000\004\022\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_list 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= ERROR 
            {
              DecList RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list declaration 
            {
              DecList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            DecList l = dl;
                            while( l.tail != null )
                                l = l.tail;
                            l.tail = new DecList(d, null);
                            RESULT = dl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= declaration 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= error 
            {
              DecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              parser.report_error ("Invalid program, syntax error in declaration (declaration_list)", e);
                              RESULT = new DecList(null, null);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= var_declaration 
            {
              Dec RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= fun_declaration 
            {
              Dec RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec fd = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_declaration ::= type_specifier ID SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleDec(tsleft, tsright, ts, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_declaration ::= type_specifier ID LBRACKET NUM RBRACKET SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayDec(tsleft, tsright, ts, i, (new IntExp(nleft, nright, Integer.parseInt(n)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_declaration ::= type_specifier ID LBRACKET error RBRACKET SEMI 
            {
              VarDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Invalid variable declaration syntax", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_declaration ::= type_specifier error SEMI 
            {
              VarDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid variable declaration syntax", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_specifier ::= INT 
            {
              NameTy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(ileft, iright, NameTy.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_specifier ::= VOID 
            {
              NameTy RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(vleft, vright, NameTy.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt 
            {
              FunctionDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp cs = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(tsleft, tsright, ts, i, p, cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fun_declaration ::= error ID LPAREN params RPAREN compound_stmt 
            {
              FunctionDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp cs = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                parser.report_error("Invalid type_specifier syntax in function declaration", e);
                                RESULT = new FunctionDec(eleft, eright, new NameTy(eleft, eright, NameTy.VOID), i, p, cs); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fun_declaration ::= type_specifier ID LPAREN params RPAREN error 
            {
              FunctionDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                parser.report_error("Invalid compound statement in function declaration", e);
                                RESULT = new FunctionDec(tsleft, tsright, ts, i, p, null); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // params ::= param_list 
            {
              VarDecList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= VOID 
            {
              VarDecList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(new SimpleDec(vleft, vright, new NameTy(vleft, vright, NameTy.VOID), ""), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_list ::= param_list COMMA param 
            {
              VarDecList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pl = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                VarDecList l = pl;
                                while( l.tail != null )
                                    l = l.tail;
                                l.tail = new VarDecList(p, null);
                                RESULT = pl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_list ::= param 
            {
              VarDecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(p, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_list ::= error 
            {
              VarDecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                parser.report_error("Invalid syntax in parameters of function declaration", e); 
                                RESULT = new VarDecList(new SimpleDec(eleft, eright, null, "ERROR"), null);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= type_specifier ID 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDec(tsleft, tsright, ts, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= type_specifier ID LBRACKET RBRACKET 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameTy ts = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayDec(tsleft, tsright, ts, i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_stmt ::= LBRACE local_declarations statement_list RBRACE 
            {
              CompoundExp RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(ldleft, ldright, ld, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // local_declarations ::= local_declarations var_declaration 
            {
              VarDecList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
                                VarDecList l = ld;
                                while(l.tail != null)
                                    l = l.tail;
                                l.tail = new VarDecList(vd, null);
                                RESULT = ld;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // local_declarations ::= 
            {
              VarDecList RESULT =null;
		RESULT = new VarDecList(null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_list ::= statement_list statement 
            {
              ExpList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
                                ExpList l = sl;
                                while(l.tail != null)
                                    l = l.tail;
                                l.tail = new ExpList(s, null);
                                RESULT = sl;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement_list ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList(null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= expression_stmt 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp es = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= compound_stmt 
            {
              Exp RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp cs = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= selection_stmt 
            {
              Exp RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfExp ss = (IfExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= iteration_stmt 
            {
              Exp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileExp is = (WhileExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= return_stmt 
            {
              Exp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnExp rs = (ReturnExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_stmt ::= expression SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_stmt ::= SEMI 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(sright, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_stmt ::= error SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid expression statement ", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // selection_stmt ::= IF LPAREN expression RPAREN statement 
            {
              IfExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(eleft, eright, e, s, new NilExp(eleft, eright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              IfExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(eleft, eright, e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // selection_stmt ::= IF LPAREN error RPAREN statement 
            {
              IfExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid if statement structure", e);
                               RESULT = new IfExp(ileft, iright, new NilExp(eleft, eright), s, new NilExp(sleft, sright));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // selection_stmt ::= IF LPAREN error RPAREN statement ELSE statement 
            {
              IfExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid if statement structure", e);
                               RESULT = new IfExp(ileft, iright, new NilExp(eleft, eright), s, s2);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement 
            {
              WhileExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(eleft, eright, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iteration_stmt ::= WHILE LPAREN error RPAREN statement 
            {
              WhileExp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                parser.report_error("Invalid expression in while loop", e); 
                                RESULT = new WhileExp(wleft, wright, null, s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iteration_stmt ::= WHILE ERROR expression RPAREN statement 
            {
              WhileExp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                parser.report_error("Missing left parenthesis in while loop", err); 
                                RESULT = new WhileExp(wleft, wright, e, s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iteration_stmt ::= WHILE LPAREN expression ERROR statement 
            {
              WhileExp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                parser.report_error("Missing right parenthesis in while loop", err); 
                                RESULT = new WhileExp(wleft, wright, e, s);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return_stmt ::= RETURN expression SEMI 
            {
              ReturnExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(eleft, eright, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return_stmt ::= RETURN SEMI 
            {
              ReturnExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnExp(sleft, sright, new NilExp(sleft, sright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= var ASSIGN expression 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarExp v = (VarExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(vleft, vright, v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression PLUS expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.PLUS, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MINUS expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.MINUS, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression TIMES expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.TIMES, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression DIV expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.DIV, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression EQ expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.EQ, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LT expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression GT expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression GTEQ expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.GTEQ, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression LTEQ expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.LTEQ, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression NEQ expression 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp s1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= var 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExp v = (VarExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExp c = (CallExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var ::= ID 
            {
              VarExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var ::= ID LBRACKET expression RBRACKET 
            {
              VarExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var ::= ID LBRACKET error RBRACKET 
            {
              VarExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                parser.report_error ("Invalid expression in id[expression]", e);
                                RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, null)); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= ID LPAREN args RPAREN 
            {
              CallExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(ileft, iright, i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= arg_list 
            {
              ExpList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList al = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= arg_list COMMA expression 
            {
              ExpList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList al = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
                                ExpList l = al;
                                while(l.tail != null)
                                    l = l.tail;
                                l.tail = new ExpList(e, null);
                                RESULT = al;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= expression 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_list ::= error 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid function arguments ", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
